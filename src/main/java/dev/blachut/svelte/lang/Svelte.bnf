{
  generate=[
    java="8"
    names="long"
//    token-sets="yes"
//    psi-classes-map="yes"
  ]

//  generateTokenAccessors=true

  parserClass="dev.blachut.svelte.lang.SvelteParser"

  extends="dev.blachut.svelte.lang.psi.SveltePsiElementImpl"

  psiClassPrefix="Svelte"
  psiImplClassSuffix="Impl"
  psiPackage="dev.blachut.svelte.lang.psi"
  psiImplPackage="dev.blachut.svelte.lang.psi.impl"

  elementTypeHolderClass="dev.blachut.svelte.lang.psi.SvelteTypes"
  elementTypeClass="dev.blachut.svelte.lang.psi.SvelteElementType"
  tokenTypeClass="dev.blachut.svelte.lang.psi.SvelteElementType"

  tokens = [
    START_MUSTACHE="{"
    END_MUSTACHE="}"
    IF="#if"
    ELSE_IF="if"
    END_IF="/if"
    EACH="#each"
    AS=" as "
    COMMA=","
    START_PAREN="("
    END_PAREN=")"
    END_EACH="/each"
    AWAIT="#await"
    AWAIT_THEN="then"
    THEN=":then"
    CATCH=":catch"
    AWAIT_END="/await"
    ELSE=":else"
  ]

  extends(".*Block")=block
  extends(".*OpeningTag")=openingTag
  extends(".*ContinuationTag")=continuationTag
  extends(".*ClosingTag")=closingTag
}

svelteComponent ::= privateScope

scope ::= privateScope

private privateScope ::= (block|interpolation|HTML_FRAGMENT)*

block ::= ifBlock | eachBlock | awaitBlock

ifBlock ::= ifBlockOpening elseIfContinuation* elseContinuation? ifBlockClosingTag {pin=1}
ifBlockOpening ::= ifBlockOpeningTag scope
ifBlockOpeningTag ::= '{' '#if' expression '}' {pin=2}
elseIfContinuation ::= elseIfContinuationTag scope
elseIfContinuationTag ::= '{' ':else' 'if' expression '}' {pin=3}
ifBlockClosingTag ::= '{' '/if' '}' {pin=2}

eachBlock ::= eachBlockOpening elseContinuation? eachBlockClosingTag {pin=1}
eachBlockOpening ::= eachBlockOpeningTag scope
eachBlockOpeningTag ::= '{' '#each' expression 'as' parameter (',' parameter)? ('(' expression ')')? '}' {pin=2}
eachBlockClosingTag ::= '{' '/each' '}' {pin=2}

awaitBlock ::= (awaitThenBlockOpening | awaitAndThen) (catchContinuation)? awaitBlockClosingTag {pin=1}
private awaitAndThen ::= awaitBlockOpening thenContinuation {pin=1}
awaitThenBlockOpening ::= awaitThenBlockOpeningTag scope
awaitThenBlockOpeningTag ::= '{' '#await' expression 'then' parameter '}' {pin=4}
awaitBlockOpening ::= awaitBlockOpeningTag scope
awaitBlockOpeningTag ::= '{' '#await' expression '}' {pin=2}
thenContinuation ::= thenContinuationTag scope
thenContinuationTag ::= '{' ':then' parameter '}' {pin=2}
catchContinuation ::= catchContinuationTag scope
catchContinuationTag::= '{' ':catch' parameter '}' {pin=2}
awaitBlockClosingTag ::= '{' '/await' '}' {pin=2}

elseContinuation ::= elseContinuationTag scope
elseContinuationTag ::= '{' ':else' '}' {pin=2}

interpolation ::= '{' expression '}' {pin=2; recoverWhile="interpolation_recover"}
private interpolation_recover ::= &'}'

fake openingTag ::= '{' '#foo' '}'
fake continuationTag ::= '{' ':foo' '}'
fake closingTag ::= '{' '/foo' '}'

expression ::= CODE_FRAGMENT {
                               name="expression"
                               extends="dev.blachut.svelte.lang.psi.SvelteCodeInjectionHostImpl"
                               implements="com.intellij.psi.PsiLanguageInjectionHost"
                             }
parameter ::= CODE_FRAGMENT {
                              name="parameter"
                              extends="dev.blachut.svelte.lang.psi.SvelteCodeInjectionHostImpl"
                              implements="com.intellij.psi.PsiLanguageInjectionHost"
                            }